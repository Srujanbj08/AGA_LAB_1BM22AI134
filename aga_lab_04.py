# -*- coding: utf-8 -*-
"""AGA_LAB_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eyU5RIXsgz1jAMfA075meNWIfcmS4_QK
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import classification_report, accuracy_score
from sklearn.neural_network import BernoulliRBM, MLPClassifier

iris = load_iris()
X = iris.data
y = iris.target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

rbm = BernoulliRBM(n_components=4, learning_rate=0.01, batch_size=10, n_iter=10, random_state=42)
rbm.fit(X_train)

X_train_rbm = rbm.transform(X_train)
X_test_rbm = rbm.transform(X_test)

pca = PCA(n_components=2)
X_train_rbm_2d = pca.fit_transform(X_train_rbm)
X_test_rbm_2d = pca.transform(X_test_rbm)

plt.figure(figsize=(10, 8))
plt.scatter(X_train_rbm_2d[:, 0], X_train_rbm_2d[:, 1], c=y_train, cmap='Spectral', edgecolor='k', s=60, alpha=0.7)
plt.colorbar(label='Iris Species')
plt.title("2D Visualization of RBM-Extracted Features", fontsize=16)
plt.xlabel("Principal Component 1", fontsize=14)
plt.ylabel("Principal Component 2", fontsize=14)
plt.grid(True)
plt.show()

classifier = MLPClassifier(hidden_layer_sizes=(128,), max_iter=500, random_state=42)
classifier.fit(X_train_rbm, y_train)

y_pred = classifier.predict(X_test_rbm)
print(classification_report(y_test, y_pred))
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier, BernoulliRBM
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import classification_report, accuracy_score

digits = load_digits()
X = digits.data
y = digits.target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

rbm = BernoulliRBM(n_components=64, learning_rate=0.05, batch_size=10, n_iter=50, random_state=42)
rbm.fit(X_train)

X_train_rbm = rbm.transform(X_train)
X_test_rbm = rbm.transform(X_test)

pca = PCA(n_components=2)
X_train_rbm_2d = pca.fit_transform(X_train_rbm)
X_test_rbm_2d = pca.transform(X_test_rbm)

plt.figure(figsize=(10, 8))
plt.scatter(X_train_rbm_2d[:, 0], X_train_rbm_2d[:, 1], c=y_train, cmap='Spectral', edgecolor='k', s=60, alpha=0.7)
plt.colorbar(label='Digit Label')
plt.title("2D Visualization of RBM-Extracted Features", fontsize=16)
plt.xlabel("Principal Component 1", fontsize=14)
plt.ylabel("Principal Component 2", fontsize=14)
plt.grid(True)
plt.show()

classifier = MLPClassifier(hidden_layer_sizes=(256, 128), max_iter=1000, solver='adam', early_stopping=True, random_state=42)
classifier.fit(X_train_rbm, y_train)

y_pred = classifier.predict(X_test_rbm)

train_acc = accuracy_score(y_train, classifier.predict(X_train_rbm)) * 100
test_acc = accuracy_score(y_test, y_pred) * 100

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

accuracy_data = pd.DataFrame({"Dataset": ["Training Accuracy", "Testing Accuracy"],
                              "Accuracy (%)": [train_acc, test_acc]})
print("\nAccuracy Table:")
print(accuracy_data)